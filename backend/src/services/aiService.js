const OpenAI = require('openai');
const logger = require('../utils/logger');

class AIService {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
  }

  /**
   * Traduz texto t√©cnico/jur√≠dico/m√©dico para linguagem simples
   * @param {string} technicalText - Texto t√©cnico a ser traduzido
   * @returns {Promise<Object>} - Tradu√ß√£o em linguagem simples
   */
  async translateToSimpleLanguage(technicalText) {
    try {
      logger.info(`üß† Iniciando tradu√ß√£o IA. Texto: ${technicalText.length} caracteres`);

      const prompt = this.buildTranslationPrompt(technicalText);

      const completion = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© "Clara", uma assistente social brasileira especializada em traduzir linguagem t√©cnica, jur√≠dica e m√©dica para portugu√™s brasileiro simples e acess√≠vel.

PERSONALIDADE:
- Calorosa, emp√°tica e paciente
- Fala como uma amiga especialista que quer genuinamente ajudar
- Usa linguagem do dia a dia, sem perder a precis√£o
- Sempre tranquiliza antes de explicar

REGRAS IMPORTANTES:
1. NUNCA d√™ conselhos m√©dicos ou jur√≠dicos espec√≠ficos
2. SEMPRE explique o que o documento DIZ, n√£o o que a pessoa deve fazer
3. Use analogias simples e familiares
4. Termine sempre com orienta√ß√µes gerais sobre pr√≥ximos passos
5. Mantenha tom respeitoso e acolhedor

ESTRUTURA DA RESPOSTA:
1. Cumprimento acolhedor
2. Explica√ß√£o em linguagem simples
3. Resumo em 3 pontos principais
4. Orienta√ß√µes gerais sobre pr√≥ximos passos`
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 2000
      });

      const response = completion.choices[0].message.content;
      
      // Estruturar a resposta
      const structuredResponse = this.parseAIResponse(response);
      
      logger.info(`‚úÖ Tradu√ß√£o IA conclu√≠da. Resposta: ${response.length} caracteres`);
      
      return structuredResponse;

    } catch (error) {
      logger.error('‚ùå Erro na tradu√ß√£o IA:', error);
      
      if (error.code === 'insufficient_quota') {
        throw new Error('Limite de uso da IA excedido. Tente novamente mais tarde.');
      }
      
      throw new Error('Erro ao processar com IA. Tente novamente.');
    }
  }

  /**
   * Responde a uma pergunta espec√≠fica do usu√°rio
   * @param {string} question - Pergunta do usu√°rio
   * @returns {Promise<Object>} - Resposta estruturada
   */
  async answerQuestion(question) {
    try {
      logger.info(`‚ùì Respondendo pergunta: ${question}`);

      const completion = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: `Voc√™ √© "Clara", uma assistente social brasileira especializada em esclarecer d√∫vidas sobre documentos e processos burocr√°ticos.

MISS√ÉO: Responder d√∫vidas espec√≠ficas sobre documentos, processos ou termos que as pessoas n√£o entendem.

REGRAS:
1. Seja emp√°tica e acolhedora
2. Explique em linguagem simples
3. Use analogias familiares
4. NUNCA d√™ conselhos m√©dicos ou jur√≠dicos espec√≠ficos
5. Sempre sugira procurar profissionais qualificados quando necess√°rio
6. Mantenha foco educativo, n√£o prescritivo

FORMATO DA RESPOSTA:
- Cumprimento caloroso
- Explica√ß√£o clara da d√∫vida
- Sugest√µes de pr√≥ximos passos (se aplic√°vel)`
          },
          {
            role: "user",
            content: `A pessoa me fez esta pergunta sobre um documento ou processo: "${question}"`
          }
        ],
        temperature: 0.3,
        max_tokens: 1500
      });

      const response = completion.choices[0].message.content;
      
      logger.info(`‚úÖ Pergunta respondida. Resposta: ${response.length} caracteres`);
      
      return {
        explanation: response,
        suggestions: this.extractSuggestions(response)
      };

    } catch (error) {
      logger.error('‚ùå Erro ao responder pergunta:', error);
      throw new Error('Erro ao processar sua pergunta. Tente novamente.');
    }
  }

  /**
   * Constr√≥i o prompt para tradu√ß√£o
   * @param {string} text - Texto a ser traduzido
   * @returns {string} - Prompt estruturado
   */
  buildTranslationPrompt(text) {
    return `Preciso que voc√™ traduza este documento para linguagem simples:

DOCUMENTO:
"""
${text}
"""

Por favor, explique o que este documento significa usando:
- Palavras simples e familiares
- Analogias do dia a dia
- Tom acolhedor e tranquilizador
- Linguagem brasileira coloquial mas respeitosa

Inclua no final um resumo com os 3 pontos mais importantes e sugest√µes gerais de pr√≥ximos passos.`;
  }

  /**
   * Analisa e estrutura a resposta da IA
   * @param {string} response - Resposta bruta da IA
   * @returns {Object} - Resposta estruturada
   */
  parseAIResponse(response) {
    // Extrair se√ß√µes da resposta
    const lines = response.split('\n').filter(line => line.trim());
    
    let explanation = '';
    let summary = [];
    let actionItems = [];
    
    let currentSection = 'explanation';
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Detectar in√≠cio de se√ß√µes
      if (trimmedLine.toLowerCase().includes('resumo') || 
          trimmedLine.toLowerCase().includes('pontos principais') ||
          trimmedLine.match(/^\d+\./)) {
        currentSection = 'summary';
        continue;
      }
      
      if (trimmedLine.toLowerCase().includes('pr√≥ximos passos') ||
          trimmedLine.toLowerCase().includes('o que fazer')) {
        currentSection = 'actions';
        continue;
      }
      
      // Adicionar conte√∫do √† se√ß√£o apropriada
      if (currentSection === 'explanation' && trimmedLine) {
        explanation += (explanation ? ' ' : '') + trimmedLine;
      } else if (currentSection === 'summary' && trimmedLine) {
        if (trimmedLine.match(/^\d+\./) || trimmedLine.startsWith('‚Ä¢') || trimmedLine.startsWith('-')) {
          summary.push(trimmedLine.replace(/^\d+\.\s*|^[‚Ä¢-]\s*/, ''));
        }
      } else if (currentSection === 'actions' && trimmedLine) {
        if (trimmedLine.match(/^\d+\./) || trimmedLine.startsWith('‚Ä¢') || trimmedLine.startsWith('-')) {
          actionItems.push(trimmedLine.replace(/^\d+\.\s*|^[‚Ä¢-]\s*/, ''));
        }
      }
    }
    
    // Se n√£o conseguiu extrair se√ß√µes espec√≠ficas, usar a resposta completa
    if (!explanation || explanation.length < 50) {
      explanation = response;
    }
    
    if (summary.length === 0) {
      summary = ['Documento analisado com explica√ß√£o detalhada acima'];
    }
    
    if (actionItems.length === 0) {
      actionItems = ['Procure orienta√ß√£o profissional adequada se necess√°rio'];
    }
    
    return {
      explanation: explanation.trim(),
      summary: summary.slice(0, 3), // M√°ximo 3 itens
      actionItems: actionItems.slice(0, 3) // M√°ximo 3 itens
    };
  }

  /**
   * Extrai sugest√µes de uma resposta
   * @param {string} response - Resposta da IA
   * @returns {Array} - Lista de sugest√µes
   */
  extractSuggestions(response) {
    const suggestions = [];
    
    // Procurar por padr√µes de sugest√µes
    const suggestionPatterns = [
      /(?:sugiro|recomendo|seria bom|voc√™ pode|experimente)([^.!?]+[.!?])/gi,
      /(?:pr√≥ximo passo|voc√™ deve|√© importante)([^.!?]+[.!?])/gi
    ];
    
    suggestionPatterns.forEach(pattern => {
      const matches = response.match(pattern);
      if (matches) {
        matches.forEach(match => {
          suggestions.push(match.trim());
        });
      }
    });
    
    // Se n√£o encontrou sugest√µes espec√≠ficas, adicionar sugest√£o padr√£o
    if (suggestions.length === 0) {
      suggestions.push('Se precisar de mais esclarecimentos, procure ajuda profissional especializada.');
    }
    
    return suggestions.slice(0, 3); // M√°ximo 3 sugest√µes
  }
}

module.exports = new AIService();